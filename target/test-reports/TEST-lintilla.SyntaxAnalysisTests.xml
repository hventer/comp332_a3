<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Hanness-MacBook-Pro.local" name="lintilla.SyntaxAnalysisTests" tests="158" errors="0" failures="0" skipped="0" time="0.169" timestamp="2019-11-05T17:30:36">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="jna.platform.library.path" value="/usr/lib:/usr/lib"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib"/><property name="java.vm.version" value="25.221-b11"/><property name="gopherProxySet" value="false"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="jna.loaded" value="true"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="AU"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="jna.nosys" value="true"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/Users/hannesventer/OneDrive - Macquarie University/Uni Work/2019 S2/COMP332/Assignment 3/comp332_a3"/><property name="java.runtime.version" value="1.8.0_221-b11"/><property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment"/><property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/endorsed"/><property name="os.arch" value="x86_64"/><property name="java.io.tmpdir" value="/var/folders/n6/bw0dprg55d72cp734tytc5680000gn/T/"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Mac OS X"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/var/folders/n6/bw0dprg55d72cp734tytc5680000gn/T/jna--970233399/jna7482074025982618334.tmp"/><property name="java.library.path" value="/Users/hannesventer/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.15.1"/><property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="user.home" value="/Users/hannesventer"/><property name="user.timezone" value="Australia/Sydney"/><property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/usr/local/Cellar/sbt/1.3.2/libexec/bin/sbt-launch.jar"/><property name="user.name" value="hannesventer"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/usr/local/Cellar/sbt/1.3.2/libexec/bin/sbt-launch.jar"/><property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_221"/><property name="java.ext.dirs" value="/Users/hannesventer/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/><property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeBig"/><property name="sun.cpu.endian" value="little"/><property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an identifier of one letter produces the correct tree" time="0.004">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an identifier as an identifier produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an identifier containing digits and underscores produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an integer as an identifier gives an error" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a non-identifier as an identifier gives an error (digit)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a non-identifier as an identifier gives an error (underscore)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a keyword as an identifier gives an error" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a keyword prefix as an identifier produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an integer of one digit as an integer produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an integer as an integer produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a non-integer as an integer gives an error" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an equal expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a less than expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an addition expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a subtraction expression produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a multiplication expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a division expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an integer expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a true expression produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a false expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an identifier expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a parenthesized expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an application expression produces the correct tree" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing another application expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; is not associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= is not associative" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= and &lt; are not associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ is left associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- is left associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- and + are left associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="* is left associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="/ is left associative" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="/ and * are left associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than application (to left)" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than application (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than application (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than application (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="* has lower precedence than application (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="/ has lower precedence than application (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="* has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="/ has lower precedence than application (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="test negation of function application" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than * (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than * (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than * (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than * (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than / (to left)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than / (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="+ has lower precedence than / (to right)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="- has lower precedence than / (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than * (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than * (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than * (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than * (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than / (to left)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than / (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than / (to right)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than / (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than + (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than + (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than + (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than + (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than - (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than - (to left)" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has lower precedence than - (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has lower precedence than - (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has higher precedence than &amp;&amp; (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has higher precedence than &amp;&amp; (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has higher precedence than &amp;&amp; (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has higher precedence than &amp;&amp; (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has higher precedence than || (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has higher precedence than || (to left)" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="= has higher precedence than || (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="&lt; has higher precedence than || (to right)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than = (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than = (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence that &lt; (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence that &lt; (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than + (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than + (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than - (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than - (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than * (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than * (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than / (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="unary - has higher precedence than / (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parentheses override precedence (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parentheses override precedence (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parentheses override associativity in expressions" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parentheses disambiguate non-associativity (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parentheses disambiguate non-associativity (to left)" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="use of un-bracketed 'if' in arithmetic expression fails (to right)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="use of un-bracketed 'if' in arithmetic expression fails (to left)" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="bracketed 'if' in arithmetic expression gives the right tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="Kym's first precedence / associativity test" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="Kym's second precedence / associativity test" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="Kym's third precedence / associativity test" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="Kym's fourth precedence / associativity test" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a dereference of an array" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a array length expression" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a double dereference" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="precedence of '!' higher than multiplicative operators" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="precedence of '!' higher than relational operators" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="precedence of '!' higher than logical operators" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse a simple assignment expression" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse simple array extension" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse block of array extensions" time="0.003">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="check that assignment is non-associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="check that append is non-associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="check that assignment and append are non-associative" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse simple for loop" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse for loop with step" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parse for loop with loop and break in body" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an empty block expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a block containing one expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a block of ';' separated expressions produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a block of many ';' separated expressions produces the correct tree" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a block containing a hanging ';' fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'let' declaration produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'let' declaration missing an initialisation expression fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'let' declaration missing an '=' fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'let' declaration missing a variable fails" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'let' with complex init expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="check that the keywords 'let' and 'mut' cannot be run together" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="check that the keywords 'let' and 'mut' cannot be run together (2)" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a trivial 'if' expression produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an 'if' expression with a more complex condition produces the correct tree" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an 'if' with missing else block fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an 'if' with missing 'else' fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an 'if' with missing then block fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing an 'if' with a missing conditions fails" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a parameter declaration of 'int' type produces the right tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a parameter with 'fn' type produces the right tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a parameter declaration with missing type fails" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a parameter declatation with missing ':' fails" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a 'fn' declaration produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing function declaration without return value produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function declaration with an empty parameter list produces the correct tree" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function with empty parameter list and no return type produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing the 'unit' type produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing the 'int' type produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing the 'bool' type produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with no parameters produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with one parameter produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with three parameters produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with a parameter of function type produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with a return type which is a function type produces the correct tree" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="parsing a function type with parameters of function type" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="a program must have at least one expression" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="a program with one expression produces the correct tree" time="0.0">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="a program with a few expressions produces the correct tree" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="programs with comments in them work" time="0.001">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="lin)" time="0.002">
                                                 
                                               </testcase><testcase classname="lintilla.SyntaxAnalysisTests" name="lin)" time="0.022">
                                                 
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>