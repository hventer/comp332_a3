[0m[[0m[0minfo[0m] [0m[0m[32mExecTests in extras/src/test/scala/lintilla:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- printing a constant integer gives the right output[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print constant integer gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- printing a constant boolean gives the right output[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print constant boolean gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple addition expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple addition expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple multiplication expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple multiplication expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple subtraction expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple subtraction expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple division expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple division expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple negation expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple negation expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple equality expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple equality expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple less expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print simple less expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print more complex expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print more complex expression gives the right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print more complex relational expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- print more complex relational expression gives right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- block translates correctly[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- nested block translates correctly[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- let binding gives right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- let binding body extends to end of block only[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- let binds variable in rest of block[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- let binding in block correctly shadows outer binding[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- simple `if` expression gives right translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- simple `if` expression evaluation (condition true)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- simple `if` expression evaluation (condition false)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `let` binding correctly scoped in then block[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `let` binding correctly scoped in else block[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `fn` binding gives correct translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `fn` binding extends to end of block only[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `fn` binding extends to end of block execution[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- `fn` body with `let` binding translates correctly[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- simple function application translation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- simple function application execution[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- call a parameterless function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- call a three parameter function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- curried function call[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- factorial example[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- fibonacci example[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- higher order example[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- while loop example[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- snippets example[0m[0m
